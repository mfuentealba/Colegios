<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" clipAndEnableScrolling="true">
	
	<fx:Script>
		<![CDATA[
			import modelo.ModelApp;
			
			import mx.containers.Grid;
			
			import spark.components.DataGrid;
			
			
			private const VERDE:uint = 0x04B404;				
			private const ROJO:uint = 0xFF0000;
			
			[Bindable]private var detalle:Number = 0;
			
			override public function prepare(hasBeenRecycled:Boolean):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				/*	var g:Graphics = graphics;             
					g.clear();      
					
					var grid1:DataGrid = DataGrid(this.owner);  
					
					if(data.side == "1" || data.side == "c")
						g.beginFill(VERDE,0.2);
					else
						g.beginFill(ROJO,0.2);
					
					g.drawRect(0, 0, unscaledWidth, unscaledHeight); 
					g.endFill();	*/
				
				
				
			}
			
			override public function set data(data:Object):void        
			{             
				super.data = data;
				var modelApp:ModelApp = ModelApp.getInstance();
				if(data)
				{
					switch(column.headerText){
						case 'Ing. Dev.':
							if(data.tipo_movimiento == 2 || data.tipo_movimiento == 6){
								lblData.text = modelApp.nf.formatNumber(data.monto) + '';
							} else {
								lblData.text = '';
							}
							break;
						case 'Gastos':
							if(data.tipo_movimiento == 3){
								lblData.text = modelApp.nf.formatNumber(data.monto) + '';
								
							} else {
								lblData.text = '';
							}
							break;
						case 'Pagos':
							if(data.tipo_movimiento == 4 || data.tipo_movimiento == 5){
								lblData.text = modelApp.nf.formatNumber(data.monto) + '';
							} else {
								lblData.text = '';
							}
							break;
						case 'Deuda Mes':
							if(data.tipo_movimiento == 4){
								lblData.text = (modelApp.nf.formatNumber(-data.monto)) + '';
							} else if(data.tipo_movimiento == 6){
								lblData.text = modelApp.nf.formatNumber(data.monto) + '';
							} else if(data.tipo_movimiento == 7){
								lblData.text = modelApp.nf.formatNumber(data.monto) + '';
							} else if(data.tipo_movimiento == 3){
								lblData.text = modelApp.nf.formatNumber(data.monto) + '';
							} else {
								lblData.text = '';
							}
							break;
						case 'Tipo Movimiento':
							switch(data.tipo_movimiento){
								case "1":
									lblData.text = "Resultado Neto AÃ±o Anterior.";
									break;
								case "2":
									lblData.text = "Ingreso de Recursos Monetarios";
									break;
								case "3":
									lblData.text = "Gasto Efectuado";
									break;
								case "4":
									lblData.text = "Pago de Gasto o Deuda";
									break;
								case "5":
									lblData.text = "Egreso de Dineros";
									break;
								case "6":
									lblData.text = "Aporte Provisorio";
									break;
								case "7":
									lblData.text = "Retenciones Adeudadas";
									break;
								
							}
							break;
						case 'Fuente Financiera':
							lblData.text = data.financiamiento ? data.financiamiento.descripcion : '';
							break;
						default:
							if(isNaN(data[column.dataField])){
								lblData.text = data[column.dataField] + '';
							} else {
								lblData.text = modelApp.nf.formatNumber(data[column.dataField]);
							}
								
					}
					
					if(data.asociado != 0){
						detalle = .4;
					} else {
						detalle = 0;
					}
					
				}
			}
			
			override public function set selected(value:Boolean):void
			{
				// TODO Auto Generated method stub
				super.selected = value;
				if(value){
					this.setStyle("color", "0xFFFFFF");	
				} else {
					this.setStyle("color", "0x666666");
				}
			}
			
			
			
			override public function set hovered(value:Boolean):void
			{
				// TODO Auto Generated method stub
				super.hovered = value;
				if(value){
					this.setStyle("color", "0xFFFFFF");	
				} else {
					if(!selected){
						this.setStyle("color", "0x666666");	
					}
					
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group minHeight="35" width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="GREEN" alpha="{detalle}"/>
			</s:fill>
			
		</s:Rect>
		<s:Label id="lblData" horizontalCenter="0" verticalCenter="0"/>
		<s:Image id="img" horizontalCenter="0" verticalCenter="0"/>	
	</s:Group>
	
	
</s:GridItemRenderer>
