<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:components="components.*" xmlns:views="views.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			protected function button1_rollOverHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function cbYear_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				var fecha:String = (new Date()).fullYear + '';
				for each(var obj:Object in modelApp.arrYears){
					if(obj.data == fecha){
						cbYear.selectedItem = obj;
					}
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import controlador.Controller;
			
			import events.MovimientoEvent;
			
			import modelo.ModelApp;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import vo.MovimientoVO;
			[Bindable] public var selectedMov:MovimientoVO;
			[Bindable] private var modelApp:ModelApp = ModelApp.getInstance();
			
			protected function fnIngresarMov(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var pop:IngresoMovimiento = new IngresoMovimiento();
				pop.fnPost = fnBuscar;
				if(event.target.label == 'Editar'){
					if(!selectedMov){
						Alert.show("Debe seleccionar un registro de la grilla para poder editarlo", 'Atención');
						return;
					} else {
						pop.movVO = selectedMov;
					}
				}
				
				PopUpManager.addPopUp(pop, FlexGlobals.topLevelApplication as DisplayObject, true);
				PopUpManager.centerPopUp(pop);
			}
			
			public function fnBuscar():void{
				var fecha:String = (Number(cbYear.selectedItem.data) - 1) + '';
				if(fecha != modelApp.periodo.id){
					var evMov:MovimientoEvent = new MovimientoEvent(MovimientoEvent.PERIODO_ANTERIOR, FlexGlobals.topLevelApplication.fnSaldoNuevo, null, {fecha: fecha});
					Controller.getInstance().dispatchEvent(evMov);
				} else {
					var ev:MovimientoEvent = new MovimientoEvent(MovimientoEvent.LISTAR, null, null, {periodo: (cbMes.selectedItem.data == '00' ? '' : cbMes.selectedItem.data) + '-' + cbYear.selectedItem.data});
					Controller.getInstance().dispatchEvent(ev);	
				}
				
				
			}
			
			private function set fnSelectedMov(val:*):void{
				selectedMov = val;
			}
			
			protected function fnEliminar(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(!selectedMov){
					Alert.show("Debe seleccionar un registro de la grilla para poder editarlo", 'Atención');
					return;
				} else {
					Alert.show("¿Está seguro que desea eliminar el registro?", 'Atención', Alert.OK|Alert.NO, null, fnConfirmarEliminacion);
				}
			}
			
			private function fnConfirmarEliminacion(ev:CloseEvent):void{
				if(ev.detail == Alert.OK){
					var evM:MovimientoEvent = new MovimientoEvent(MovimientoEvent.ELIMINAR, fnEliminado, selectedMov);
					Controller.getInstance().dispatchEvent(evM);
				}
			}
			
			private function fnEliminado(res:*):void{
				if(res == 'OK'){
					Alert.show("Registro Eliminado", 'Info');	
					fnBuscar();
				} else {
					Alert.show("Ha ocurrido un error en la transacción", 'Info');
				}
				
			}
			
			
			
			
			
			
			private var saldoCaja:int = 0;
			
			protected function dgStagging_rollOverHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var i:int = DataGrid(event.target).grid.hoverRowIndex;
				var j:int = DataGrid(event.target).grid.hoverColumnIndex;
				if(i > -1 && j > -1){
					DataGrid(event.target).grid
				}
			}
			
			/*private function fnSaldos(item:Object, column:GridColumn):String{
				var txt:String;
				switch(column.headerText){
					case "Saldo Caja":
						saldoCaja += item.monto; 
						txt = saldoCaja + '';
						break;
					case "Deuda Acum.":
						txt = "Ingreso de Recursos Monetarios";
						break;
					case "Resultado":
						txt = "Gasto Efectuado";
						break;
					
				}
				return txt;
			}*/
			
		]]>
	</fx:Script>
	<fx:Binding source="dgMov.selectedItem" destination="fnSelectedMov"/>
	<s:layout>
		<s:VerticalLayout paddingLeft="5" paddingRight="5" horizontalAlign="right"/>
	</s:layout>
	<s:HGroup paddingTop="5" paddingLeft="5" paddingRight="5" width="100%">
		<s:VGroup width="40%">
			<s:Label x="23" top="5" fontWeight="bold" text="Filtros"/>
			<s:BorderContainer x="10" y="19" width="100%" cornerRadius="5">
				<s:layout>
					<s:HorizontalLayout paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5" verticalAlign="middle"/>
				</s:layout>
				
					
				<s:Label verticalCenter="0" text="Mes"/>
				<s:ComboBox id="cbMes" dataProvider="{new ArrayCollection(modelApp.arrMeses)}" selectedIndex="0"/> 
			
				<s:Label verticalCenter="0" text="Año" />		
				<s:ComboBox id="cbYear" dataProvider="{new ArrayCollection(modelApp.arrYears)}" creationComplete="cbYear_creationCompleteHandler(event)"/>
				
				<s:Button label="Buscar" height="100%" rollOver="button1_rollOverHandler(event)" click="fnBuscar()" skinClass="assets.skins.ButtonCustomSkin"/>
				
				
				
			</s:BorderContainer>	
		</s:VGroup>
		<!--<s:VGroup width="40%">
			<s:Label x="465" top="5" fontWeight="bold" text="Detalle"/>
			<s:BorderContainer x="458" y="19" width="100%" height="85" cornerRadius="5">
				<s:Label x="10" y="10" fontSize="15" text="{selectedMov.glosa}"/>
				<s:Label x="11" y="43" text="Proveedor:"/>
				<s:Label x="81" y="41" text="{selectedMov.proveedor.nombre}"/>
				<s:Label x="10" y="62" text="Monto:"/>
				<s:Label x="80" y="62" text="{selectedMov.monto}"/>
				<s:Label x="233" y="42" text="Rut:"/>
				<s:Label x="277" y="43" text="{selectedMov.proveedor.rut}"/>
				<s:Label x="161" y="61" text="Código Contable:"/>
				<s:Label x="278" y="61" text="{selectedMov.cod_contable}"/>
				<s:Label x="332" y="61" text="Cuenta:"/>
				<s:Label x="395" y="61" text="{selectedMov.cod_cuenta}"/>
			</s:BorderContainer>	
		</s:VGroup>-->
		<s:VGroup width="20%">
			<s:Label fontWeight="bold" text="Acción"/>
			<s:BorderContainer width="100%" height="37" cornerRadius="5">
				<s:layout>
					<s:HorizontalLayout paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
				</s:layout>
				
				<s:Button width="100%" label="Ingresar" click="fnIngresarMov(event)" height="100%"/>
				<!--<s:VGroup gap="5" 
						  horizontalAlign="left" verticalAlign="top">-->
					<s:Button label="Editar" click="fnIngresarMov(event)" height="100%"/>
					<s:Button label="Eliminar" click="fnEliminar(event)" height="100%"/>	
				<!--</s:VGroup>-->
				
				
			</s:BorderContainer>	
		</s:VGroup>
		
		
		
		
		
	</s:HGroup>
	<s:HGroup width="100%" gap="20" horizontalAlign="right">
		<!--<s:Label text="Periodo Anterior:     " fontWeight="bold" fontSize="18" width="50%"/>
		<s:HGroup width="10%" height="100%" verticalAlign="middle">
			<s:Label text="Saldo Caja:" fontWeight="bold"/>
			<s:Label text="{modelApp.saldoCaja}"/>	
		</s:HGroup>
		<s:HGroup width="10%" height="100%" verticalAlign="middle">
			<s:Label text="Deuda:" fontWeight="bold"/>
			<s:Label text="{modelApp.deuda}"/>	
		</s:HGroup>
		<s:HGroup width="10%" height="100%" verticalAlign="middle">
			<s:Label text="Resultado" fontWeight="bold"/>
			<s:Label text="{modelApp.resultado}"/>	
		</s:HGroup>-->
		
		<components:InfoMarket texto="Periodo Anterior" saldo="{modelApp.saldoCaja}" deuda="{modelApp.deuda}" resultado="{modelApp.resultado}" colorFondo="#889F50" height="30" width="70%"/>
		
		
	</s:HGroup>
	<s:HGroup width="100%" horizontalAlign="right" height="100%">
		<!--<views:IngresoCompromiso width="25%" height="100%">
			
		</views:IngresoCompromiso>-->
		<s:DataGrid id="dgMov" width="100%" height="100%" requestedRowCount="4" dataProvider="{modelApp.arrMovimiento}"
					rollOverColor="#999999" selectionColor="#555555"  alternatingRowColors="[0xeeeeee,0xffffff]"
					rollOver="dgStagging_rollOverHandler(event)">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="fec_mvto" headerText="Fecha" itemRenderer="components.RenderStagging"></s:GridColumn>
					<s:GridColumn headerText="Tipo Movimiento" itemRenderer="components.RenderStagging"></s:GridColumn>
					<s:GridColumn dataField="tipo_documento" headerText="Tipo Doc" itemRenderer="components.RenderStagging"></s:GridColumn>
					<s:GridColumn dataField="nro_doc" headerText="N° Documento" itemRenderer="components.RenderStagging"></s:GridColumn>
					<s:GridColumn headerText="Ing. Dev."  itemRenderer="components.RenderStagging"></s:GridColumn>
					<s:GridColumn headerText="Gastos" itemRenderer="components.RenderStagging"></s:GridColumn>
					<s:GridColumn headerText="Pagos"  itemRenderer="components.RenderStagging"></s:GridColumn>
					<s:GridColumn headerText="Deuda Mes" dataField="deuda" itemRenderer="components.RenderStagging"></s:GridColumn>
					<s:GridColumn dataField="saldoCaja" headerText="Saldo Caja" itemRenderer="components.RenderStagging"></s:GridColumn>
					<s:GridColumn dataField="deudaAcum" headerText="Deuda Acum." itemRenderer="components.RenderStagging"></s:GridColumn>
					<s:GridColumn dataField="resultado" headerText="Resultado" itemRenderer="components.RenderStagging"></s:GridColumn>
					<s:GridColumn dataField="financiamiento.descripcion" headerText="Fuente Financiera" itemRenderer="components.RenderStagging"></s:GridColumn>
				</s:ArrayList>
			</s:columns>
			
		</s:DataGrid>
	</s:HGroup>
	
	
	
	
</s:Group>
